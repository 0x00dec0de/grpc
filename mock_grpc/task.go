// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gertcuykens/grpc (interfaces: TodoServer,TodoClient)

// Package mock_grpc is a generated GoMock package.
package mock_grpc

import (
	context "context"
	grpc "github.com/gertcuykens/grpc"
	gomock "github.com/golang/mock/gomock"
	grpc0 "google.golang.org/grpc"
	reflect "reflect"
)

// MockTodoServer is a mock of TodoServer interface
type MockTodoServer struct {
	ctrl     *gomock.Controller
	recorder *MockTodoServerMockRecorder
}

// MockTodoServerMockRecorder is the mock recorder for MockTodoServer
type MockTodoServerMockRecorder struct {
	mock *MockTodoServer
}

// NewMockTodoServer creates a new mock instance
func NewMockTodoServer(ctrl *gomock.Controller) *MockTodoServer {
	mock := &MockTodoServer{ctrl: ctrl}
	mock.recorder = &MockTodoServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoServer) EXPECT() *MockTodoServerMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockTodoServer) Add(arg0 context.Context, arg1 *grpc.Task) (*grpc.Void, error) {
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(*grpc.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockTodoServerMockRecorder) Add(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTodoServer)(nil).Add), arg0, arg1)
}

// List mocks base method
func (m *MockTodoServer) List(arg0 context.Context, arg1 *grpc.Void) (*grpc.TaskList, error) {
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*grpc.TaskList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockTodoServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTodoServer)(nil).List), arg0, arg1)
}

// MockTodoClient is a mock of TodoClient interface
type MockTodoClient struct {
	ctrl     *gomock.Controller
	recorder *MockTodoClientMockRecorder
}

// MockTodoClientMockRecorder is the mock recorder for MockTodoClient
type MockTodoClientMockRecorder struct {
	mock *MockTodoClient
}

// NewMockTodoClient creates a new mock instance
func NewMockTodoClient(ctrl *gomock.Controller) *MockTodoClient {
	mock := &MockTodoClient{ctrl: ctrl}
	mock.recorder = &MockTodoClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTodoClient) EXPECT() *MockTodoClientMockRecorder {
	return m.recorder
}

// Add mocks base method
func (m *MockTodoClient) Add(arg0 context.Context, arg1 *grpc.Task, arg2 ...grpc0.CallOption) (*grpc.Void, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(*grpc.Void)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add
func (mr *MockTodoClientMockRecorder) Add(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTodoClient)(nil).Add), varargs...)
}

// List mocks base method
func (m *MockTodoClient) List(arg0 context.Context, arg1 *grpc.Void, arg2 ...grpc0.CallOption) (*grpc.TaskList, error) {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*grpc.TaskList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockTodoClientMockRecorder) List(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTodoClient)(nil).List), varargs...)
}
